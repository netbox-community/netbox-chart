apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: netbox
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: netbox
  {{ if .Values.updateStrategy -}}
  strategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{ end -}}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if (not .Values.existingSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: netbox
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- include "common.images.renderPullSecrets" (dict "images" (list .Values.image) "context" $) | nindent 6 }}
      serviceAccountName: {{ include "netbox.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init-dirs
        image: {{ include "netbox.init.image" . | quote }}
        imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
        command: [/bin/sh, -c, mkdir -p /opt/unit/state /opt/unit/tmp]
        {{- if .Values.init.resources }}
        resources: {{- toYaml .Values.init.resources | nindent 11 }}
        {{- else if ne .Values.init.resourcesPreset "none" }}
        resources: {{- include "common.resources.preset" (dict "type" .Values.init.resourcesPreset) | nindent 10 }}
        {{- end }}
        {{- if .Values.init.securityContext.enabled }}
        securityContext: {{- omit .Values.init.securityContext "enabled" | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: optunit
          mountPath: /opt/unit
      {{- if .Values.initContainers }}
      {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | trim | nindent 6 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        {{- if .Values.securityContext.enabled }}
        securityContext: {{- omit .Values.securityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        image: {{ include "netbox.image" . | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.command }}
        command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 10 }}
        {{- end }}
        {{- if .Values.args }}
        args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 10 }}
        {{- end }}
        env:
        - name: SUPERUSER_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "common.secrets.name" (dict "existingSecret" .Values.superuser.existingSecret "defaultNameSuffix" "superuser" "context" $) }}
              key: username
        - name: SUPERUSER_EMAIL
          valueFrom:
            secretKeyRef:
              name: {{ include "common.secrets.name" (dict "existingSecret" .Values.superuser.existingSecret "defaultNameSuffix" "superuser" "context" $) }}
              key: email
        {{- if .Values.dbWaitDebug }}
        - name: DB_WAIT_DEBUG
          value: "1"
        {{- end }}
        {{- if .Values.overrideUnitConfig }}
        - name: UNIT_CONFIG
          value: /run/config/netbox/nginx-unit.json
        {{- end }}
        {{- with .Values.extraEnvs }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.allowedHostsIncludesPodIP }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        {{- end }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /{{ .Values.basePath }}login/
            port: http
            {{- if (not (eq (index .Values.allowedHosts 0) "*")) }}
            httpHeaders:
            - name: Host
              value: {{ (index .Values.allowedHosts 0) | quote }}
            {{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.lifecycleHooks }}
        lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/netbox/config/configuration.py
          subPath: configuration.py
          readOnly: true
        {{- range .Values.remoteAuth.backends }}
        {{- if eq . "netbox.authentication.LDAPBackend" }}
        - name: config
          mountPath: /etc/netbox/config/ldap/ldap_config.py
          subPath: ldap_config.py
          readOnly: true
        {{- end }}
        {{- end }}
        - name: config
          mountPath: /run/config/netbox
          readOnly: true
        - name: secrets
          mountPath: /run/secrets/netbox
          readOnly: true
        {{- include "netbox.extraConfig.volumeMounts" . | nindent 8 -}}
        - name: netbox-tmp
          mountPath: /tmp
        - name: media
          mountPath: /opt/netbox/netbox/media
          subPath: {{ .Values.persistence.subPath | default "" | quote }}
        {{- if .Values.reportsPersistence.enabled }}
        - name: reports
          mountPath: /opt/netbox/netbox/reports
          subPath: {{ .Values.reportsPersistence.subPath | default "" | quote }}
        {{- end }}
        {{- if .Values.scriptsPersistence.enabled }}
        - name: scripts
          mountPath: /opt/netbox/netbox/scripts
          subPath: {{ .Values.scriptsPersistence.subPath | default "" | quote }}
        {{- end }}
        - name: optunit
          mountPath: /opt/unit
        - name: secrets
          mountPath: /run/secrets/superuser_password
          subPath: superuser_password
          readOnly: true
        - name: secrets
          mountPath: /run/secrets/superuser_api_token
          subPath: superuser_api_token
          readOnly: true
        {{- if .Values.extraVolumeMounts }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 12 }}
        {{- else if ne .Values.resourcesPreset "none" }}
        resources: {{- include "common.resources.preset" (dict "type" .Values.resourcesPreset) | nindent 10 }}
        {{- end }}
      {{- if .Values.sidecars }}
      {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 6 }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "common.names.fullname" . }}
      - name: secrets
        projected:
          sources:
          - secret:
              name: {{ include "common.secrets.name" (dict "existingSecret" .Values.existingSecret "defaultNameSuffix" "config" "context" $) }}
              items:
              - key: email_password
                path: email_password
              - key: secret_key
                path: secret_key
              {{- range .Values.remoteAuth.backends }}
              {{- if eq . "netbox.authentication.LDAPBackend" }}
              - key: ldap_bind_password
                path: ldap_bind_password
              {{- end }}
              {{- end }}
          - secret:
              name: {{ include "common.secrets.name" (dict "existingSecret" .Values.superuser.existingSecret "defaultNameSuffix" "superuser" "context" $) }}
              items:
              - key: password
                path: superuser_password
              - key: api_token
                path: superuser_api_token
          - secret:
              name: {{ include "netbox.postgresql.secret" . | quote }}
              items:
              - key: {{ include "netbox.postgresql.secretKey" . | quote }}
                path: db_password
          - secret:
              name: {{ include "netbox.tasksRedis.secret" . | quote }}
              items:
              - key: {{ include "netbox.tasksRedis.secretKey" . | quote }}
                path: redis_tasks_password
          - secret:
              name: {{ include "netbox.cachingRedis.secret" . | quote }}
              items:
              - key: {{ include "netbox.cachingRedis.secretKey" . | quote }}
                path: redis_cache_password
      {{- include "netbox.extraConfig.volumes" . | nindent 6 -}}
      - name: netbox-tmp
        emptyDir:
          medium: Memory
      - name: optunit
        emptyDir:
          medium: Memory
      - name: media
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (printf "%s-media" (include "common.names.fullname" .)) }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- if .Values.reportsPersistence.enabled }}
      - name: reports
        persistentVolumeClaim:
          claimName: {{ .Values.reportsPersistence.existingClaim | default (printf "%s-reports" (include "common.names.fullname" .)) }}
      {{- end }}
      {{- if .Values.scriptsPersistence.enabled }}
      - name: scripts
        persistentVolumeClaim:
          claimName: {{ .Values.scriptsPersistence.existingClaim | default (printf "%s-scripts" (include "common.names.fullname" .)) }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 6 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 6 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 6 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 6 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 6 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
